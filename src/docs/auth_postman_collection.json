{
  "info": {
    "name": "Auth API v1.0",
    "description": "Colección completa y actualizada para Turnity Backend API con soporte para roleName",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000/api/v1",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token", 
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "description": "Endpoints de autenticación con soporte para roleName",
      "item": [
        {
          "name": "Register Client (Default Role)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    console.log('Cliente registrado:', response.data.email);",
                  "    console.log('Rol asignado:', response.data.role.name);",
                  "    pm.test('Usuario registrado correctamente', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.role.name).to.eql('CLIENT');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Ana López\",\n  \"email\": \"ana.lopez@example.com\",\n  \"phone\": \"+5491123456789\",\n  \"password\": \"MiPassword123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Registra un cliente con rol por defecto (CLIENT). No requiere especificar roleName."
          }
        },
        {
          "name": "Register Stylist",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    console.log('Estilista registrado:', response.data.email);",
                  "    pm.test('Estilista registrado con rol correcto', function () {",
                  "        pm.expect(response.data.role.name).to.eql('STYLIST');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Elena Martínez\",\n  \"email\": \"elena.martinez@example.com\",\n  \"phone\": \"+5491198765432\",\n  \"password\": \"StylistPass123!\",\n  \"roleName\": \"STYLIST\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Registra un estilista especificando roleName como STYLIST"
          }
        },
        {
          "name": "Register Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    console.log('Admin registrado:', response.data.email);",
                  "    pm.test('Admin registrado con rol correcto', function () {",
                  "        pm.expect(response.data.role.name).to.eql('ADMIN');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Roberto Admin\",\n  \"email\": \"roberto.admin@example.com\",\n  \"phone\": \"+5491167890123\",\n  \"password\": \"AdminPass123!\",\n  \"roleName\": \"ADMIN\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Registra un administrador especificando roleName como ADMIN"
          }
        },
        {
          "name": "Login Client",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.data.token);",
                  "    pm.collectionVariables.set('refresh_token', response.data.refreshToken);",
                  "    console.log('Login exitoso:', response.data.user.email);",
                  "    console.log('Token guardado automáticamente');",
                  "    pm.test('Login exitoso', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.token).to.not.be.empty;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"ana.lopez@example.com\",\n  \"password\": \"MiPassword123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login con el cliente registrado. Guarda automáticamente el token."
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.data.token);",
                  "    pm.collectionVariables.set('refresh_token', response.data.refreshToken);",
                  "    console.log('Token renovado exitosamente');",
                  "    pm.test('Token renovado', function () {",
                  "        pm.expect(response.data.token).to.not.be.empty;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh-token",
              "host": ["{{base_url}}"],
              "path": ["auth", "refresh-token"]
            },
            "description": "Renueva el JWT token usando el refresh token guardado"
          }
        }
      ]
    },
    {
      "name": "Profile Management",
      "description": "Gestión de perfiles de usuario",
      "item": [
        {
          "name": "Get Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('👤 Perfil obtenido:', response.data.name);",
                  "    console.log('Email:', response.data.email);",
                  "    console.log('Rol:', response.data.role.name);",
                  "    pm.test('Perfil obtenido correctamente', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data).to.have.property('id');",
                  "        pm.expect(response.data).to.have.property('role');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/profile",
              "host": ["{{base_url}}"],
              "path": ["auth", "profile"]
            },
            "description": "Obtiene el perfil del usuario autenticado"
          }
        },
        {
          "name": "Update Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('Perfil actualizado:', response.data.name);",
                  "    pm.test('Perfil actualizado correctamente', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.name).to.include('Updated');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Ana María López Updated\",\n  \"phone\": \"+5491987654321\",\n  \"profilePicture\": \"https://example.com/new-photo.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/profile",
              "host": ["{{base_url}}"],
              "path": ["auth", "profile"]
            },
            "description": "Actualiza el perfil del usuario autenticado"
          }
        },
        {
          "name": "Change Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('Contraseña cambiada exitosamente');",
                  "    pm.test('Contraseña cambiada', function () {",
                  "        pm.expect(pm.response.json().success).to.be.true;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"MiPassword123!\",\n  \"newPassword\": \"NuevoPassword456!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/change-password",
              "host": ["{{base_url}}"],
              "path": ["auth", "change-password"]
            },
            "description": "Cambia la contraseña del usuario autenticado"
          }
        }
      ]
    },
    {
      "name": "Quick Login (Seed Users)",
      "description": "Login rápido con usuarios del seed para testing",
      "item": [
        {
          "name": "Login Admin (Seed)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.data.token);",
                  "    pm.collectionVariables.set('refresh_token', response.data.refreshToken);",
                  "    console.log('Admin login exitoso');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@turnity.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login rápido con admin del seed"
          }
        },
        {
          "name": "Login Client María (Seed)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.data.token);",
                  "    pm.collectionVariables.set('refresh_token', response.data.refreshToken);",
                  "    console.log('Cliente María login exitoso');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"maria@example.com\",\n  \"password\": \"client123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login rápido con cliente María del seed"
          }
        },
        {
          "name": "Login Stylist Lucía (Seed)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwt_token', response.data.token);",
                  "    pm.collectionVariables.set('refresh_token', response.data.refreshToken);",
                  "    console.log('Estilista Lucía login exitoso');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"lucia@turnity.com\",\n  \"password\": \"stylist123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login rápido con estilista Lucía del seed"
          }
        }
      ]
    },
    {
      "name": "Error Testing",
      "description": "Tests para validar manejo de errores",
      "item": [
        {
          "name": "Invalid Role Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Error de rol inválido', function () {",
                  "    pm.expect(pm.response.code).to.eql(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.code).to.eql('VALIDATION_ERROR');",
                  "});",
                  "console.log('Error esperado - rol inválido');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Invalid Role User\",\n  \"email\": \"invalid.role@example.com\",\n  \"phone\": \"+5491123456789\",\n  \"password\": \"TestPass123!\",\n  \"roleName\": \"INVALID_ROLE\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Test para rol inválido - debería retornar 400"
          }
        },
        {
          "name": "Duplicate Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Error de email duplicado', function () {",
                  "    pm.expect(pm.response.code).to.eql(409);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.code).to.eql('CONFLICT');",
                  "});",
                  "console.log('Error esperado - email duplicado');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Duplicate User\",\n  \"email\": \"maria@example.com\",\n  \"phone\": \"+5491123456789\",\n  \"password\": \"TestPass123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Test para email duplicado usando email del seed - debería retornar 409"
          }
        },
        {
          "name": "Weak Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Error de contraseña débil', function () {",
                  "    pm.expect(pm.response.code).to.eql(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.message).to.include('Password');",
                  "});",
                  "console.log('Error esperado - contraseña débil');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Weak Password User\",\n  \"email\": \"weak.password@example.com\",\n  \"phone\": \"+5491123456789\",\n  \"password\": \"123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Test para contraseña débil - debería retornar 400"
          }
        },
        {
          "name": "Invalid Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Error de login inválido', function () {",
                  "    pm.expect(pm.response.code).to.eql(401);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.code).to.eql('UNAUTHORIZED');",
                  "});",
                  "console.log('Error esperado - credenciales inválidas');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Test para credenciales inválidas - debería retornar 401"
          }
        },
        {
          "name": "Unauthorized Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Error de acceso sin autorización', function () {",
                  "    pm.expect(pm.response.code).to.eql(401);",
                  "});",
                  "console.log('Error esperado - sin token');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/profile",
              "host": ["{{base_url}}"],
              "path": ["auth", "profile"]
            },
            "description": "Test para acceso sin token - debería retornar 401"
          }
        },
        {
          "name": "Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Error de token inválido', function () {",
                  "    pm.expect(pm.response.code).to.eql(401);",
                  "});",
                  "console.log('Error esperado - token inválido');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid.token.here",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/profile",
              "host": ["{{base_url}}"],
              "path": ["auth", "profile"]
            },
            "description": "Test para token inválido - debería retornar 401"
          }
        }
      ]
    },
    {
      "name": "Role Testing",
      "description": "Tests específicos para validar el comportamiento de roles",
      "item": [
        {
          "name": "Test Case Insensitive Roles",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Rol normalizado correctamente', function () {",
                  "        pm.expect(response.data.role.name).to.eql('CLIENT');",
                  "    });",
                  "    console.log('Rol normalizado de \"client\" a \"CLIENT\"');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Case Test User\",\n  \"email\": \"case.test@example.com\",\n  \"phone\": \"+5491123456789\",\n  \"password\": \"TestPass123!\",\n  \"roleName\": \"client\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Test para verificar que los roles son case insensitive"
          }
        },
        {
          "name": "Default Role Assignment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Rol CLIENT asignado por defecto', function () {",
                  "        pm.expect(response.data.role.name).to.eql('CLIENT');",
                  "    });",
                  "    console.log('Rol CLIENT asignado automáticamente');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Default Role User\",\n  \"email\": \"default.role@example.com\",\n  \"phone\": \"+5491123456789\",\n  \"password\": \"TestPass123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Test para verificar que se asigna CLIENT por defecto cuando no se especifica rol"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script global que se ejecuta antes de cada request",
          "console.log('Ejecutando request a:', pm.request.url.toString());",
          "console.log('Método:', pm.request.method);",
          "",
          "// Verificar si tenemos token para requests autenticados",
          "const authHeader = pm.request.headers.get('Authorization');",
          "if (authHeader && authHeader.includes('{{jwt_token}}')) {",
          "    const token = pm.collectionVariables.get('jwt_token');",
          "    if (!token) {",
          "        console.log('Token no encontrado - asegúrate de hacer login primero');",
          "    }",
          "}"
        ]
      }
    }
  ]
}