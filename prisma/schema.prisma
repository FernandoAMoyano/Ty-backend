// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum RoleName {
  ADMIN
  CLIENT
  STYLIST
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum NotificationType {
  APPOINTMENT_CONFIRMATION
  APPOINTMENT_REMINDER
  APPOINTMENT_CANCELLATION
  PROMOTIONAL
  SYSTEM
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  TRANSFER
  ONLINE
}

// Modelos
model Role {
  id          String   @id @default(uuid())
  name        RoleName @unique
  description String?
  createdAt   DateTime @default(now())
  
  // Relaciones
  users       User[]
}

model User {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  phone          String
  password       String
  isActive       Boolean        @default(true)
  profilePicture String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relaciones
  roleId         String
  role           Role           @relation(fields: [roleId], references: [id])
  client         Client?
  stylist        Stylist?
  appointments   Appointment[]
  notifications  Notification[]
}

model Client {
  id          String        @id @default(uuid())
  preferences String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relaciones
  userId      String        @unique
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

model Stylist {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relaciones
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  services     Service[]     @relation("StylistToService")
  appointments Appointment[]
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones
  services    Service[]
}

model Service {
  id                String          @id @default(uuid())
  name              String
  description       String
  duration          Int
  durationVariation Int             @default(0)
  price             Decimal         @db.Decimal(10, 2)
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relaciones
  categoryId        String
  category          Category        @relation(fields: [categoryId], references: [id])
  stylists          Stylist[]       @relation("StylistToService")
  appointments      Appointment[]   @relation("AppointmentToService")
}

model AppointmentStatus {
  id          String        @id @default(uuid())
  name        String
  description String?
  
  // Relaciones
  appointments Appointment[]
}

model Appointment {
  id           String             @id @default(uuid())
  dateTime     DateTime
  duration     Int
  confirmedAt  DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  
  // Relaciones
  userId       String
  user         User               @relation(fields: [userId], references: [id])
  clientId     String
  client       Client             @relation(fields: [clientId], references: [id])
  stylistId    String?
  stylist      Stylist?           @relation(fields: [stylistId], references: [id])
  scheduleId   String
  schedule     Schedule           @relation(fields: [scheduleId], references: [id])
  statusId     String
  status       AppointmentStatus  @relation(fields: [statusId], references: [id])
  services     Service[]          @relation("AppointmentToService")
  payments     Payment[]
}

model Schedule {
  id          String        @id @default(uuid())
  dayOfWeek   DayOfWeek
  startTime   String        // HH:MM format
  endTime     String        // HH:MM format
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relaciones
  holidayId   String?
  holiday     Holiday?      @relation(fields: [holidayId], references: [id])
  appointments Appointment[]
}

model Holiday {
  id           String             @id @default(uuid())
  name         String
  date         DateTime           @db.Date
  description  String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  
  // Relaciones
  schedules    Schedule[]
  exceptions   ScheduleException[]
}

model ScheduleException {
  id                 String    @id @default(uuid())
  exceptionDate      DateTime  @db.Date
  startTimeException String    // HH:MM format
  endTimeException   String    // HH:MM format
  reason             String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relaciones
  holidayId          String?
  holiday            Holiday?  @relation(fields: [holidayId], references: [id])
}

model NotificationStatus {
  id            String         @id @default(uuid())
  name          String
  description   String?
  
  // Relaciones
  notifications Notification[]
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  message   String
  sentAt    DateTime?
  createdAt DateTime         @default(now())
  
  // Relaciones
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  statusId  String
  status    NotificationStatus @relation(fields: [statusId], references: [id])
}

model Payment {
  id            String        @id @default(uuid())
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus
  method        PaymentMethod?
  paymentDate   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relaciones
  appointmentId String
  appointment   Appointment   @relation(fields: [appointmentId], references: [id])
}