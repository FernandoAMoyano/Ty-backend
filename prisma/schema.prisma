generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(uuid())
  name        RoleName @unique
  description String?
  createdAt   DateTime @default(now())
  users       User[]
}

model User {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  phone          String
  password       String
  isActive       Boolean        @default(true)
  profilePicture String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  roleId         String
  appointments   Appointment[]
  client         Client?
  notifications  Notification[]
  stylist        Stylist?
  role           Role           @relation(fields: [roleId], references: [id])
}

model Client {
  id           String        @id @default(uuid())
  preferences  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String        @unique
  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stylist {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String        @unique
  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  stylistServices StylistService[]
 
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]
  testField String?
}

model Service {
  id                String        @id @default(uuid())
  name              String
  description       String
  duration          Int
  durationVariation Int           @default(0)
  price             Decimal       @db.Decimal(10, 2)
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  categoryId        String
  category          Category      @relation(fields: [categoryId], references: [id])
  appointments      Appointment[] @relation("AppointmentToService")
  stylistServices StylistService[]

}

model StylistService {
  id           String   @id @default(uuid())
  stylistId    String
  serviceId    String
  customPrice  Decimal? @db.Decimal(10, 2)
  isOffering   Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  stylist      Stylist  @relation(fields: [stylistId], references: [id], onDelete: Cascade)
  service      Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([stylistId, serviceId])
  
}

model AppointmentStatus {
  id           String        @id @default(uuid())
  name         String
  description  String?
  appointments Appointment[]
}

model Appointment {
  id          String            @id @default(uuid())
  dateTime    DateTime
  duration    Int
  confirmedAt DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      String
  clientId    String
  stylistId   String?
  scheduleId  String
  statusId    String
  client      Client            @relation(fields: [clientId], references: [id])
  schedule    Schedule          @relation(fields: [scheduleId], references: [id])
  status      AppointmentStatus @relation(fields: [statusId], references: [id])
  stylist     Stylist?          @relation(fields: [stylistId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  payments    Payment[]
  services    Service[]         @relation("AppointmentToService")
}

model Schedule {
  id           String        @id @default(uuid())
  dayOfWeek    DayOfWeek
  startTime    String
  endTime      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  holidayId    String?
  appointments Appointment[]
  holiday      Holiday?      @relation(fields: [holidayId], references: [id])
}

model Holiday {
  id          String              @id @default(uuid())
  name        String
  date        DateTime            @db.Date
  description String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  schedules   Schedule[]
  exceptions  ScheduleException[]
}

model ScheduleException {
  id                 String   @id @default(uuid())
  exceptionDate      DateTime @db.Date
  startTimeException String
  endTimeException   String
  reason             String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  holidayId          String?
  holiday            Holiday? @relation(fields: [holidayId], references: [id])
}

model NotificationStatus {
  id            String         @id @default(uuid())
  name          String
  description   String?
  notifications Notification[]
}

model Notification {
  id        String             @id @default(uuid())
  type      NotificationType
  message   String
  sentAt    DateTime?
  createdAt DateTime           @default(now())
  userId    String
  statusId  String
  status    NotificationStatus @relation(fields: [statusId], references: [id])
  user      User               @relation(fields: [userId], references: [id])
}

model Payment {
  id            String         @id @default(uuid())
  amount        Decimal        @db.Decimal(10, 2)
  status        PaymentStatus
  method        PaymentMethod?
  paymentDate   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointmentId String
  appointment   Appointment    @relation(fields: [appointmentId], references: [id])
}

enum RoleName {
  ADMIN
  CLIENT
  STYLIST
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum NotificationType {
  APPOINTMENT_CONFIRMATION
  APPOINTMENT_REMINDER
  APPOINTMENT_CANCELLATION
  PROMOTIONAL
  SYSTEM
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  TRANSFER
  ONLINE
}
